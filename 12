# install_ai_agent.ps1
$ErrorActionPreference = "Stop"
$global:ExitCode = 0

Write-Host ""
Write-Host "[SETUP] Starting AI Agent Setup..."

# Check Internet
Write-Host "[CHECK] Checking Internet..."
if (-not (Test-Connection -Quiet -Count 1 google.com)) {
    Write-Host "[ERROR] No Internet connection."
    exit 11
}
Write-Host "[OK] Internet is available."
Write-Host ""

# Check Node.js
$node = Get-Command node -ErrorAction SilentlyContinue
if (-not $node) {
    Write-Host "[SETUP] Node.js not found. Installing..."
    $url = "https://nodejs.org/dist/v22.17.0/node-v22.17.0-x64.msi"
    $installer = "$PSScriptRoot\node_installer.msi"

    Invoke-WebRequest $url -OutFile $installer
    Start-Process msiexec -Wait -ArgumentList "/i `"$installer`" /quiet"

    $env:PATH += ";C:\Program Files\nodejs"
    $node = Get-Command node -ErrorAction SilentlyContinue
    if (-not $node) {
        Write-Host "[ERROR] Node.js still not detected after install."
        exit 12
    }
    Write-Host "[OK] Node.js installed."
} else {
    Write-Host "[OK] Node.js is already installed."
}
Write-Host ""

# Create package.json
$pkgPath = Join-Path $PSScriptRoot "package.json"
if (-not (Test-Path $pkgPath)) {
    $jsonContent = @'
{
  "name": "ai-agent",
  "version": "1.0.0",
  "type": "commonjs",
  "main": "index.js",
  "dependencies": {
    "@wppconnect-team/wppconnect": "latest"
  }
}
'@

    $bytes = [System.Text.Encoding]::UTF8.GetBytes($jsonContent)
    [System.IO.File]::WriteAllBytes($pkgPath, $bytes)

    if (-not (Test-Path $pkgPath)) {
        Write-Host "[ERROR] Failed to create package.json"
        exit 13
    }
    Write-Host "[OK] package.json created."
} else {
    Write-Host "[OK] package.json already exists."
}
Write-Host ""


# Install wppconnect
Write-Host "[SETUP] Installing wppconnect..."
Push-Location $PSScriptRoot
try {
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "[ERROR] Failed to install wppconnect"
        exit 14
    }
} finally {
    Pop-Location
}
Write-Host "[OK] wppconnect installed."
Write-Host ""



# Check if Python is installed and usable
function Test-PythonInstalled {
    $cmd = Get-Command python -ErrorAction SilentlyContinue
    if ($cmd -and $cmd.Source -notmatch "windowsApps") { return $true }

    $cmd3 = Get-Command python3 -ErrorAction SilentlyContinue
    if ($cmd3 -and $cmd3.Source -notmatch "windowsApps") { return $true }

    return $false
}

# Get latest Python release download URL for 64-bit Windows installer
function Get-LatestPythonInstallerUrl {
    $page = Invoke-WebRequest "https://www.python.org/downloads/windows/" -UseBasicParsing
    $matchResults = Select-String -InputObject $page.Content -Pattern 'https:\/\/www\.python\.org\/ftp\/python\/([\d.]+)\/python-\1-amd64\.exe' -AllMatches

    if ($matchResults.Matches.Count -eq 0) {
        Write-Host "[ERROR] Failed to detect latest Python version from website."
        exit 14
    }

    # Get latest version match
    $latestMatch = $matchResults.Matches | Sort-Object Value -Descending | Select-Object -First 1
    return $latestMatch.Value
}


# Main logic
if (-not (Test-PythonInstalled)) {
    Write-Host "`n[SETUP] Python not found. Installing..."

    # Get download URL
    $pyUrl = Get-LatestPythonInstallerUrl
    $version = ($pyUrl -split "/")[-2]
    $pyInstaller = "$PSScriptRoot\python-installer.exe"

    Write-Host "[INFO] Downloading Python $version..."
    Invoke-WebRequest $pyUrl -OutFile $pyInstaller

    Write-Host "[INFO] Installing Python silently..."
    Start-Process -FilePath $pyInstaller -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1 Include_test=0" -Wait

    # Update environment variables
    $env:PATH += ";C:\Program Files\Python$($version.Replace('.', ''))\Scripts;C:\Program Files\Python$($version.Replace('.', ''))"
    $env:PATH = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)
    Start-Sleep -Seconds 3

    if (-not (Test-PythonInstalled)) {
        Write-Host "[ERROR] Python not detected after installation."
        exit 15
    } else {
        Write-Host "[OK] Python $version installed successfully."
    }
} else {
    Write-Host "[OK] Python already installed."
}

# Show version
$pythonCmd = Get-Command python -ErrorAction SilentlyContinue
if ($pythonCmd -and $pythonCmd.Source -notmatch "windowsApps") {
    Write-Host "`n[INFO] Python path: $($pythonCmd.Source)"
    & $pythonCmd.Source --version
}

# Upgrade pip
Write-Host "[SETUP] Upgrading pip..."
python -m pip install --upgrade pip
if ($LASTEXITCODE -ne 0) {
    Write-Host "[ERROR] Failed to upgrade pip"
    exit 16
}

# Install Python packages
Write-Host "[SETUP] Installing python-dotenv..."
pip install python-dotenv
if ($LASTEXITCODE -ne 0) {
    Write-Host "[ERROR] Failed to install python-dotenv"
    exit 17
}

Write-Host "[SETUP] Installing google-generativeai..."
pip install google-generativeai
if ($LASTEXITCODE -ne 0) {
    Write-Host "[ERROR] Failed to install google-generativeai"
    exit 18
}

Write-Host ""
Write-Host "[OK] All components installed successfully!"
exit 0
